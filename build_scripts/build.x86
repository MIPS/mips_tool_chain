
# This script uses the build script to create a glibc based linux cross
# GCC package.  Set TOPDIR and TARGET before running.  TOPDIR should be
# The directory where you want to build everything (it will contain subdirs
# for sources, objects, etc) and TARGET should either be mips-mti-linux-gnu
# or mips-unknown-linux-gnu (those are the only tested targets).

# See https://info.mips.com/display/SWWIKI/Building+GCC for more information.

TOPDIR=/directory
GITHOME=ssh://git@github.com/MIPS
TARGET=mips-mti-linux-gnu
INSTALL=$TOPDIR/install-$TARGET
BUILDINSTALL=$TOPDIR/install-build
HOSTINSTALL=$TOPDIR/install-host
OBJ=$TOPDIR/obj-$TARGET
BUILDOBJ=$TOPDIR/obj-build
HOSTOBJ=$TOPDIR/obj-host
SYSROOT=$INSTALL/sysroot
HOSTTOOLSROOT=/projects/mipssw/toolchains/
BUILDPATH=$INSTALL/bin

# Set the host. Supported hosts are:
# x86_64-pc-linux-gnu - 64-bit Linux (CentOS 5 upwards)
# i686-pc-linux-gnu   - 32-bit Linux (CentOS 5 upwards)
# x86_64-w64-mingw32  - 64-bit Windows
# i686-w64-mingw32    - 32-bit Windows
#
# The Windows hosts require a canadian cross environment, i.e. a
# reference cross compiler that can execute on the current build
# machine must be in the path.
#
# Uncomment the line below and set the host as required:
#
# HOSTTRIPLE=x86_64-pc-linux-gnu

case x$HOSTTRIPLE in
  xx86_64-pc-linux-gnu | xi686-pc-linux-gnu )
    # We pretend the build machine is the host on Linux as we can
    # execute the binaries we create.
    if [ "x$HOSTVERSION" == "x" ]; then
      HOSTVERSION=4.9.4-centos6
    fi
    HOSTOBJ="${HOSTOBJ}-$HOSTTRIPLE"
    HOSTINSTALL="${HOSTINSTALL}-$HOSTTRIPLE"
    BUILDPATH="${BUILDPATH}:$HOSTTOOLSROOT/$HOSTTRIPLE/$HOSTVERSION/bin"
    HOSTOPTIONS="--host=$HOSTTRIPLE --build_triple=$HOSTTRIPLE";;
  xx86_64-w64-mingw32 | xi686-w64-mingw32 )
    if [ "x$HOSTVERSION" == "x" ]; then
      HOSTVERSION=4.9.4_v3.1.0
    fi
    HOSTOBJ="${HOSTOBJ}-$HOSTTRIPLE"
    HOSTINSTALL="${HOSTINSTALL}-$HOSTTRIPLE"
    BUILDPATH="${BUILDPATH}:$HOSTTOOLSROOT/$HOSTTRIPLE/$HOSTVERSION/bin"
    HOSTOPTIONS="--host=$HOSTTRIPLE";;
  *)
    ;;
esac

BUILDPATH="${BUILDPATH}:$BUILDINSTALL/bin"

cd $TOPDIR

G="--path=$BUILDPATH --git_home=$GITHOME --jobs=3"
BUILDG="$G --build=$BUILDOBJ --prefix=$BUILDINSTALL"
G="$G $HOSTOPTIONS --buildlibs=$BUILDINSTALL --hostlibs=$HOSTINSTALL"
HOSTG="$G --build=$HOSTOBJ --prefix=$HOSTINSTALL"
G="$G --build=$OBJ --prefix=$INSTALL --target=$TARGET --sysroot=$SYSROOT"

# If you want to force an update of your sources before the build.
# uncommment the next line.
# b/build_toolchain update $G texinfo
# b/build_toolchain update $G termcap ncurses expat
# b/build_toolchain update $G binutils gdb glibc gcc qemu
# b/build_toolchain update $G zlib pixman libffi glib qemu

# If you do not want to use the system gmp, mpfr, mpc, or dejagnu.
# uncomment the next line.
# b/build_toolchain update $G gmp mpfr mpc dejagnu

b/build_toolchain build $BUILDG texinfo || exit 1

b/build_toolchain build $G binutils || exit 1
b/build_toolchain build $G initial_gcc || exit 1
b/build_toolchain build $G linux_headers || exit 1
b/build_toolchain build $G sysroot || exit 1
b/build_toolchain build $G gcc || exit 1

b/build_toolchain build $HOSTG expat || exit 1
b/build_toolchain build $HOSTG termcap || exit 1
b/build_toolchain build $HOSTG ncurses || exit 1
b/build_toolchain build $G gdb || exit 1

if [ "x$HOSTTRIPLE" != "xx86_64-w64-mingw32" ]; then
  b/build_toolchain build $HOSTG zlib || exit 1
  b/build_toolchain build $HOSTG pixman || exit 1
  b/build_toolchain build $HOSTG libffi || exit 1
  # Uncomment these for mingw hosted builds
  # Note glib will not build for x86_64 mingw32
  if [ "x$HOSTTRIPLE" == "xi686-w64-mingw32" ]; then
    b/build_toolchain build $HOSTG libiconv || exit 1
    b/build_toolchain build $HOSTG gettext || exit 1
  fi
  b/build_toolchain build $HOSTG glib || exit 1
  b/build_toolchain build $HOSTG python || exit 1
  b/build_toolchain build $G qemu || exit 1
fi

# This does a single run with default arch, endian, abi, and float setting.

#b/build_toolchain check $G --dejagnu_sim=$INSTALL/bin/qemu-mips --dejagnu_sim_options='-r 4.0' --runtestflags='--target_board=multi-sim' gcc
